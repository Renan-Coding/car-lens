import { GoogleGenerativeAI } from '@google/generative-ai';
import { NextRequest, NextResponse } from 'next/server';
import fs from 'fs';
import path from 'path';

// Inicializar o Gemini AI
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || '');

// Fun√ß√£o para carregar os dados dos carros
function loadCarsData() {
  try {
    const carsPath = path.join(process.cwd(), 'data', 'cars.json');
    const carsData = fs.readFileSync(carsPath, 'utf8');
    return JSON.parse(carsData);
  } catch (error) {
    console.error('Erro ao carregar dados dos carros:', error);
    return [];
  }
}

export async function POST(request: NextRequest) {
  try {
    const { message, context } = await request.json();

    if (!process.env.GEMINI_API_KEY) {
      return NextResponse.json(
        { error: 'Chave da API do Gemini n√£o configurada' },
        { status: 500 }
      );
    }

    // Carregar dados dos carros dispon√≠veis
    const carsData = loadCarsData();

    // Configurar o modelo
    const model = genAI.getGenerativeModel({ model: 'gemini-2.0-flash' });

    // Prompt personalizado para consultor automotivo com dados reais
    const systemPrompt = `Voc√™ √© CarLens AI, um consultor automotivo especialista brasileiro, amig√°vel e profissional. 

CONTEXTO: Voc√™ trabalha para a CarLens, uma plataforma premium de busca e compara√ß√£o de ve√≠culos no Brasil.

DADOS DOS CARROS DISPON√çVEIS NA PLATAFORMA:
${JSON.stringify(carsData, null, 2)}

PERSONALIDADE:
- Entusiasta de carros com conhecimento t√©cnico profundo
- Comunica√ß√£o clara, amig√°vel e acess√≠vel
- Sempre positivo e solucionador de problemas
- Usa emojis automotivos relevantes (üöó, ‚ö°, üí°, üîß, etc.)

ESPECIALIDADES:
- Recomenda√ß√µes personalizadas baseadas nos carros DISPON√çVEIS
- An√°lise de pre√ßos dos modelos em estoque
- Compara√ß√µes entre os modelos dispon√≠veis
- Dicas de compra espec√≠ficas para os carros da plataforma

IMPORTANTE: 
- SEMPRE base suas recomenda√ß√µes nos carros listados acima
- Mencione pre√ßos espec√≠ficos quando relevante
- Se n√£o temos um modelo solicitado, sugira alternativas similares dispon√≠veis
- Sempre inclua a localiza√ß√£o quando mencionar um carro espec√≠fico
- Tend√™ncias do mercado automotivo brasileiro
- Financiamento e seguros
- Manuten√ß√£o preventiva

DIRETRIZES:
- Sempre considere o or√ßamento e necessidades do usu√°rio
- Mencione pr√≥s e contras de forma equilibrada
- Sugira alternativas quando apropriado
- Use dados do mercado brasileiro
- Seja espec√≠fico com modelos, anos e vers√µes
- Inclua informa√ß√µes sobre consumo, confiabilidade e custo de manuten√ß√£o

FORMATO DE RESPOSTA:
- NUNCA use markdown, asteriscos (*), hashtags (#) ou formata√ß√£o especial
- Use apenas texto simples e emojis
- Organize as informa√ß√µes com quebras de linha simples
- Use emojis para destacar pontos importantes
- Mantenha tom conversacional mas informativo
- Substitua t√≠tulos por emojis + texto (ex: "üöó Carros Dispon√≠veis:")

${context ? `CONTEXTO ADICIONAL: ${context}` : ''}

Agora responda √† pergunta do usu√°rio:`;

    // Gerar resposta
    const result = await model.generateContent([
      { text: systemPrompt },
      { text: `Usu√°rio pergunta: ${message}` }
    ]);

    const response = await result.response;
    let aiResponse = response.text();

    // Limpar formata√ß√£o markdown
    aiResponse = aiResponse
      .replace(/#{1,6}\s/g, '') // Remove hashtags de t√≠tulos
      .replace(/\*\*(.*?)\*\*/g, '$1') // Remove negrito **texto**
      .replace(/\*(.*?)\*/g, '$1') // Remove it√°lico *texto*
      .replace(/^\s*[\*\-\+]\s/gm, '‚Ä¢ ') // Converte listas markdown para bullet simples
      .replace(/^\s*\d+\.\s/gm, '‚Ä¢ ') // Converte listas numeradas para bullets
      .trim();

    return NextResponse.json({
      message: aiResponse,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('Erro na AI:', error);
    return NextResponse.json(
      { 
        error: 'Erro interno do servidor. Tente novamente em alguns instantes.',
        details: error instanceof Error ? error.message : 'Erro desconhecido'
      },
      { status: 500 }
    );
  }
}